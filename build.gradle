buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'docker'

def dockerDir = 'build/docker'
jar.baseName = 'hello'
jar.version = "$BUILD_ID"
def repo_serv = project.hasProperty('ACR_LOGIN_SERV') ? project.property('ACR_LOGIN_SERV') : 'none'
def repo_login = project.hasProperty('ACR_USERNAME') ? project.property('ACR_USERNAME') : 'none'
def repo_password = project.hasProperty('ACR_PASSWORD') ? project.property('ACR_PASSWORD') : 'none'

jar {
	println "Jar name: $jar.archiveName"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

//task functionalTest(type:Test, dependsOn: testClasses) {
test {
	testLogging {
		showStackTraces = false
		showStandardStreams = false
		showExceptions = false
		showCauses = false
		events = []
		exceptionFormat "full"
	}
	afterTest { desc, result ->
		println "Executing test [${desc.className}].${desc.name}, result: ${result.resultType}"
	}
}

jacocoTestReport() {
	group = "Reporting"
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/reports/coverage"
	}
}

task dockerCopyJar(type: Copy) {
	from "build/libs/${jar.archiveName}"
	into dockerDir
}

task dockerbuildImage(type: Docker, dependsOn: dockerCopyJar) {
	push = project.hasProperty('push')

	baseImage = 'java:8'
	applicationName = jar.baseName
	tagVersion = jar.version
	addFile ("${jar.archiveName}")
	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', "/${jar.archiveName}"])
	// exposePort(8080)
}

task dockerPushImage(type: Exec) {
	def localImageTag = "$jar.baseName:$jar.version"
	def remoteImageTag = "${repo_serv}/$localImageTag"
	logger.warn("Pushing new image: $remoteImageTag")

	commandLine 'bash', '-e', '-c', """
		docker tag $localImageTag $remoteImageTag
        echo $repo_password | docker login $repo_serv --username $repo_login --password-stdin
        docker push $remoteImageTag
		docker logout $repo_serv
        """
	doLast {
		logger.warn("Pushed new image: $remoteImageTag")
	}
}
